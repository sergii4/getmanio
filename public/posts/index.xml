<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Sergii Getman</title>
    <link>https://getman.io/posts/</link>
    <description>Recent content in Posts on Sergii Getman</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Thu, 23 Apr 2020 20:05:22 +0300</lastBuildDate>
    
	<atom:link href="https://getman.io/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Manipulate Unicode in Go</title>
      <link>https://getman.io/posts/manipulate-unicode-in-go/</link>
      <pubDate>Thu, 23 Apr 2020 20:05:22 +0300</pubDate>
      
      <guid>https://getman.io/posts/manipulate-unicode-in-go/</guid>
      <description>We work with string every day. We work we character sets every day. But how much do we know about ASCII, UTF-8, Unicode?
There is the Caesar cipher method:
 The method in which each letter in the plaintext is replaced by a letter some fixed number of positions down the alphabet. The method is named after Julius Caesar, who used it in his private correspondence.
 Assume we have &amp;ldquo;hello worldz&amp;rdquo; and want encode it with shifting by 1.</description>
    </item>
    
    <item>
      <title>Docker, go modules and private repos</title>
      <link>https://getman.io/posts/docker-go-mod-cache/</link>
      <pubDate>Sun, 29 Mar 2020 20:14:27 +0300</pubDate>
      
      <guid>https://getman.io/posts/docker-go-mod-cache/</guid>
      <description>Go modules change the way we work with dependency not only locally but in Docker(CI) as well.
First problem we face is caching dependency. It resolves quite simple as docker layer:
 When building an image, Docker steps through the instructions in your Dockerfile, executing each in the order specified. As each instruction is examined, Docker looks for an existing image in its cache that it can reuse, rather than creating a new (duplicate) image.</description>
    </item>
    
  </channel>
</rss>